<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:util="http://www.springframework.org/schema/util"
	
	
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	   		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	   		http://www.springframework.org/schema/context
	   		http://www.springframework.org/schema/context/spring-context-3.0.xsd
			http://www.springframework.org/schema/mvc 
			http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
			http://www.springframework.org/schema/tx  
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    http://www.springframework.org/schema/aop  
    http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/util
     http://www.springframework.org/schema/util/spring-util-3.0.xsd"> 

	
	
	<bean id="dataSource"
		class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName"
			value="com.mysql.jdbc.Driver">
		</property>
		<property name="url"
			value="jdbc:mysql://127.0.0.1:3306/uunemo2?useUnicode=true&amp;characterEncoding=utf8">
		</property>
		<property name="username" value="root"></property>
		<property name="password" value="makao"></property>
		<!-- 防止数据库超时，下面三项是确保获得的连接是有效的 -->
		  <property name="testOnBorrow" value="true"></property>
		  <property name="testOnReturn" value="true"></property>
		  <property name="testWhileIdle" value="true"></property>
		  <property name="validationQuery" value="SELECT 1"></property>
		  <!-- property name="timeBetweenEvictionRunsMillis" value="检查无效连接的时间间隔"></property-->
		  <!-- property name="minEvictableIdleTimeMillis" value="连接闲置的时间"></property-->
	</bean>
	
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		
		<property name="hibernateProperties">
			<props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.jdbc.fetch_size">100</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop> 
                <prop key="hibernate.connection.release_mode">after_transaction</prop>

<!--                 <prop key="hibernate.cache.provider_class">net.sf.ehcache.hibernate.SingletonEhCacheProvider</prop> -->
            </props>
		</property>
		
		
		<property name="packagesToScan">
            <list>
                <value>com.uunemo.*</value>
            </list>
        </property>
     </bean>
	
	
	<!-- 声明一个 Hibernate 3 的事务管理器供代理类自动管理事务用 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory"><ref local="sessionFactory" /></property>
	</bean>
	
	<!-- 处理default请求，并不过滤 -->
	<mvc:default-servlet-handler/>
	
	 <bean id="hibernateTemplate"  class="org.springframework.orm.hibernate3.HibernateTemplate">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>
	<!-- 激活spring的注解. -->
	<context:annotation-config />
	
	<!-- Spring AOP auto-proxy creation (required to support Shiro annotations) -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator">
        <property name="proxyTargetClass" value="true"/> 
    </bean>

<!--  事务控制 -->
<!-- 加入shiro后报错，代理类异常，因此使用aspectj的注解方式 -->
<!-- 找到错误原因，不使用aspectj -->
   <tx:annotation-driven  transaction-manager="transactionManager" proxy-target-class="true"/>
<!--     <tx:annotation-driven mode="aspectj"></tx:annotation-driven>  -->
        

	<!-- 扫描注解组件并且自动的注入spring beans中. 
	例如,他会扫描@Controller 和@Service下的文件.所以确保此base-package设置正确. -->
	<context:component-scan base-package="com.uunemo" />
	<context:component-scan base-package="com.uunemo.security" />
	

	<!-- 配置注解驱动的Spring MVC Controller 的编程模型.注:次标签只在 Servlet MVC工作! -->
	<mvc:annotation-driven />
	<!-- 用注解来实现事务管理 -->

	
   	<mvc:resources location="/resources/" mapping="/resources/**"/>
	
	  <!-- SpringMVC上传文件时，需要配置MultipartResolver处理器 -->    
       <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">    
           <property name="defaultEncoding" value="UTF-8"/>    
           <!-- 指定所上传文件的总大小不能超过200KB。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 -->    
           <!-- 不在这里限制了,后台各自进行限制了-->   
           <property name="maxUploadSize" value="2000000"/>   
       </bean>   
          
       <!-- SpringMVC在超出上传文件限制时，会抛出org.springframework.web.multipart.MaxUploadSizeExceededException -->    
       <!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的，而且此时还没有进入到Controller方法中 -->    
       <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">    
           <property name="exceptionMappings">    
               <props>    
                   <!-- 遇到MaxUploadSizeExceededException异常时，跳转到/page/html/errorGolbal.html页面 -->    
                   <prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">/page/error.jsp</prop>    
               </props>    
           </property>    
       </bean>  
	
	
	
	 <!-- =========================================================
         Shiro Components
         ========================================================= -->
  
	<import resource="spring-config-shiro.xml"/>
	
	</beans>

